version: '3.5'

services:
  nginx:
    image: nginx:1.19.6-alpine
    container_name: ${P_NAME}_nginx
    ports:
      - "8888:80"
    volumes:
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - ./docker/nginx/api.conf:/etc/nginx/conf.d/api.conf:ro
      - ${BACK_CODE_HOST}:${BACK_CODE_CONTAINER}:ro
      - ${FRONT_CODE_HOST}:${FRONT_CODE_CONTAINER}:ro
    networks:
      - backend
    env_file:
      - .env_common
    command: [nginx-debug, '-g', 'daemon off;']
  db:
    image: postgis/postgis:13-3.1-alpine
    container_name: ${P_NAME}_db
    ports:
      - "5432:5432"
    env_file:
      - .env
      - .env_common
    volumes:
      - ./docker/db/data:/var/lib/postgresql/data
    networks:
      - backend
  php:
    image: pawarow/php-fpm8.0.3-alpine:latest
    user: "1000"
    container_name: ${P_NAME}_php
    env_file:
      - .env
      - .env_common
    environment:
      - DB_CONNECTION=pgsql
      - DB_HOST=${P_NAME}_db
      - DB_PORT=5432
      - DB_DATABASE=${POSTGRES_DB}
      - DB_USERNAME=${POSTGRES_USER}
      - DB_PASSWORD=${POSTGRES_PASSWORD}
    depends_on:
      - db
    volumes:
      - ${BACK_CODE_HOST}:${BACK_CODE_CONTAINER}
    networks:
      - backend
  composer:
    container_name: composer
    restart: 'no'
    image: composer:2
    command: install
    volumes:
      - ${BACK_CODE_HOST}:/app
    depends_on:
      - php
  react:
    container_name: ${P_NAME}_react
    build:
      context: ./client
      dockerfile: Dockerfile.prod
    volumes:
      - ./client/app:/app
    command: sh -c "npm install && npm run build && chown -R root:1000 ./build && tail -f /dev/null"
    depends_on:
      - composer
    networks:
      - backend
networks:
  backend:
    name: ${P_NAME}_api
    driver: bridge
